// <auto-generated />
using System;
using DAL.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(ChatContext))]
    [Migration("20220627144903_AddLikeFeature")]
    partial class AddLikeFeature
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DAL.Entities.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<string>("PublicId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserForeignKey")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserForeignKey");

                    b.ToTable("Photo", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsMain = true,
                            PublicId = "1",
                            Url = "https://randomuser.me/api/portraits/women/54.jpg",
                            UserForeignKey = 1
                        },
                        new
                        {
                            Id = 2,
                            IsMain = true,
                            PublicId = "2",
                            Url = "https://randomuser.me/api/portraits/women/14.jpg",
                            UserForeignKey = 2
                        },
                        new
                        {
                            Id = 3,
                            IsMain = true,
                            PublicId = "3",
                            Url = "https://randomuser.me/api/portraits/women/15.jpg",
                            UserForeignKey = 3
                        },
                        new
                        {
                            Id = 4,
                            IsMain = true,
                            PublicId = "4",
                            Url = "https://randomuser.me/api/portraits/women/16.jpg",
                            UserForeignKey = 4
                        });
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Interests")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Introduction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastActive")
                        .HasColumnType("datetime2");

                    b.Property<string>("LookingFor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = " HN",
                            Country = "VN",
                            Created = new DateTime(2022, 6, 27, 21, 49, 3, 659, DateTimeKind.Local).AddTicks(9883),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "bachduyhoang2k@gmail.com",
                            FullName = "Bach Duy Hoang",
                            Gender = "female",
                            Interests = "Gym",
                            Introduction = "I'm an extrovert person",
                            LastActive = new DateTime(2022, 6, 27, 21, 49, 3, 659, DateTimeKind.Local).AddTicks(9890),
                            LookingFor = "New Challengers",
                            PasswordHash = new byte[] { 183, 18, 115, 67, 15, 113, 157, 174, 132, 198, 114, 94, 89, 50, 37, 8, 190, 30, 30, 167, 68, 224, 46, 55, 56, 162, 145, 180, 122, 22, 185, 22, 67, 20, 118, 251, 70, 32, 160, 147, 16, 202, 87, 165, 61, 234, 225, 46, 71, 152, 193, 33, 81, 219, 240, 123, 10, 42, 242, 105, 254, 169, 196, 157 },
                            PasswordSalt = new byte[] { 109, 251, 237, 181, 74, 33, 2, 102, 57, 207, 249, 52, 225, 53, 60, 167, 40, 132, 94, 57, 181, 250, 237, 101, 251, 130, 121, 54, 238, 75, 191, 133, 5, 48, 131, 60, 124, 36, 255, 57, 120, 109, 253, 87, 173, 169, 78, 245, 120, 107, 69, 2, 37, 53, 69, 112, 139, 16, 31, 77, 116, 119, 46, 236, 52, 207, 180, 84, 25, 160, 3, 40, 174, 117, 86, 2, 213, 191, 193, 152, 132, 234, 51, 34, 253, 143, 207, 71, 82, 159, 37, 159, 70, 76, 113, 21, 110, 164, 47, 85, 23, 193, 86, 14, 206, 84, 169, 200, 107, 202, 149, 238, 94, 126, 249, 70, 119, 52, 90, 45, 16, 231, 241, 207, 238, 137, 215, 135 },
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            City = " HN",
                            Country = "VN",
                            Created = new DateTime(2022, 6, 27, 21, 49, 3, 659, DateTimeKind.Local).AddTicks(9935),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "string@gmail.com",
                            FullName = "Nguyen Van A",
                            Gender = "female",
                            Interests = "Gym",
                            Introduction = "I'm an extrovert person",
                            LastActive = new DateTime(2022, 6, 27, 21, 49, 3, 659, DateTimeKind.Local).AddTicks(9935),
                            LookingFor = "New Challengers",
                            PasswordHash = new byte[] { 183, 18, 115, 67, 15, 113, 157, 174, 132, 198, 114, 94, 89, 50, 37, 8, 190, 30, 30, 167, 68, 224, 46, 55, 56, 162, 145, 180, 122, 22, 185, 22, 67, 20, 118, 251, 70, 32, 160, 147, 16, 202, 87, 165, 61, 234, 225, 46, 71, 152, 193, 33, 81, 219, 240, 123, 10, 42, 242, 105, 254, 169, 196, 157 },
                            PasswordSalt = new byte[] { 109, 251, 237, 181, 74, 33, 2, 102, 57, 207, 249, 52, 225, 53, 60, 167, 40, 132, 94, 57, 181, 250, 237, 101, 251, 130, 121, 54, 238, 75, 191, 133, 5, 48, 131, 60, 124, 36, 255, 57, 120, 109, 253, 87, 173, 169, 78, 245, 120, 107, 69, 2, 37, 53, 69, 112, 139, 16, 31, 77, 116, 119, 46, 236, 52, 207, 180, 84, 25, 160, 3, 40, 174, 117, 86, 2, 213, 191, 193, 152, 132, 234, 51, 34, 253, 143, 207, 71, 82, 159, 37, 159, 70, 76, 113, 21, 110, 164, 47, 85, 23, 193, 86, 14, 206, 84, 169, 200, 107, 202, 149, 238, 94, 126, 249, 70, 119, 52, 90, 45, 16, 231, 241, 207, 238, 137, 215, 135 },
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            City = " HN",
                            Country = "VN",
                            Created = new DateTime(2022, 6, 27, 21, 49, 3, 659, DateTimeKind.Local).AddTicks(9948),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "string1@gmail.com",
                            FullName = "Bach Duy Hoang",
                            Gender = "female",
                            Interests = "Gym",
                            Introduction = "I'm an extrovert person",
                            LastActive = new DateTime(2022, 6, 27, 21, 49, 3, 659, DateTimeKind.Local).AddTicks(9948),
                            LookingFor = "New Challengers",
                            PasswordHash = new byte[] { 183, 18, 115, 67, 15, 113, 157, 174, 132, 198, 114, 94, 89, 50, 37, 8, 190, 30, 30, 167, 68, 224, 46, 55, 56, 162, 145, 180, 122, 22, 185, 22, 67, 20, 118, 251, 70, 32, 160, 147, 16, 202, 87, 165, 61, 234, 225, 46, 71, 152, 193, 33, 81, 219, 240, 123, 10, 42, 242, 105, 254, 169, 196, 157 },
                            PasswordSalt = new byte[] { 109, 251, 237, 181, 74, 33, 2, 102, 57, 207, 249, 52, 225, 53, 60, 167, 40, 132, 94, 57, 181, 250, 237, 101, 251, 130, 121, 54, 238, 75, 191, 133, 5, 48, 131, 60, 124, 36, 255, 57, 120, 109, 253, 87, 173, 169, 78, 245, 120, 107, 69, 2, 37, 53, 69, 112, 139, 16, 31, 77, 116, 119, 46, 236, 52, 207, 180, 84, 25, 160, 3, 40, 174, 117, 86, 2, 213, 191, 193, 152, 132, 234, 51, 34, 253, 143, 207, 71, 82, 159, 37, 159, 70, 76, 113, 21, 110, 164, 47, 85, 23, 193, 86, 14, 206, 84, 169, 200, 107, 202, 149, 238, 94, 126, 249, 70, 119, 52, 90, 45, 16, 231, 241, 207, 238, 137, 215, 135 },
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            City = " HN",
                            Country = "VN",
                            Created = new DateTime(2022, 6, 27, 21, 49, 3, 659, DateTimeKind.Local).AddTicks(9959),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "string2@gmail.com",
                            FullName = "Bach Duy Hoang",
                            Gender = "female",
                            Interests = "Gym",
                            Introduction = "I'm an extrovert person",
                            LastActive = new DateTime(2022, 6, 27, 21, 49, 3, 659, DateTimeKind.Local).AddTicks(9959),
                            LookingFor = "New Challengers",
                            PasswordHash = new byte[] { 183, 18, 115, 67, 15, 113, 157, 174, 132, 198, 114, 94, 89, 50, 37, 8, 190, 30, 30, 167, 68, 224, 46, 55, 56, 162, 145, 180, 122, 22, 185, 22, 67, 20, 118, 251, 70, 32, 160, 147, 16, 202, 87, 165, 61, 234, 225, 46, 71, 152, 193, 33, 81, 219, 240, 123, 10, 42, 242, 105, 254, 169, 196, 157 },
                            PasswordSalt = new byte[] { 109, 251, 237, 181, 74, 33, 2, 102, 57, 207, 249, 52, 225, 53, 60, 167, 40, 132, 94, 57, 181, 250, 237, 101, 251, 130, 121, 54, 238, 75, 191, 133, 5, 48, 131, 60, 124, 36, 255, 57, 120, 109, 253, 87, 173, 169, 78, 245, 120, 107, 69, 2, 37, 53, 69, 112, 139, 16, 31, 77, 116, 119, 46, 236, 52, 207, 180, 84, 25, 160, 3, 40, 174, 117, 86, 2, 213, 191, 193, 152, 132, 234, 51, 34, 253, 143, 207, 71, 82, 159, 37, 159, 70, 76, 113, 21, 110, 164, 47, 85, 23, 193, 86, 14, 206, 84, 169, 200, 107, 202, 149, 238, 94, 126, 249, 70, 119, 52, 90, 45, 16, 231, 241, 207, 238, 137, 215, 135 },
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("DAL.Entities.UserLike", b =>
                {
                    b.Property<int>("CurrentUserId")
                        .HasColumnType("int");

                    b.Property<int>("LikedUserId")
                        .HasColumnType("int");

                    b.HasKey("CurrentUserId", "LikedUserId");

                    b.HasIndex("LikedUserId");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("DAL.Entities.Photo", b =>
                {
                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Photos")
                        .HasForeignKey("UserForeignKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.UserLike", b =>
                {
                    b.HasOne("DAL.Entities.User", "CurrentUser")
                        .WithMany("LikedUsers")
                        .HasForeignKey("CurrentUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "LikedUser")
                        .WithMany("LikedByUser")
                        .HasForeignKey("LikedUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CurrentUser");

                    b.Navigation("LikedUser");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Navigation("LikedByUser");

                    b.Navigation("LikedUsers");

                    b.Navigation("Photos");
                });
#pragma warning restore 612, 618
        }
    }
}
